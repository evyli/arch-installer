#!/bin/bash
#
# Copyright (C) 2017  nyshria <nyshria@member.fsf.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Partition numbers assumed during disk partitioning
export BOOT_PARTITION=1
export MAIN_PARTITION=5

cmd-disk-partition() {
    local force=0
    if [[ "${1:-}" = "--force" ]]; then
        force=1
    fi

    config-read

    if [[ "$(blkid "$DEVICE")" ]]; then
        if (( ! force )); then
            die "Drive already contains some partitions.. use --force"
        fi
    fi

    if ! ask-y-No "Really continue with creating partitions?"; then
        return 1
    fi

    if (( WIPE_SECURE )); then
        category "Securely wipe hard drive"
        cryptsetup open --type plain "$DEVICE" SEC_DRIVE --key-file "/dev/random"
        local bytes_size
        bytes_size="$(blockdev --getsize64 "/dev/mapper/SEC_DRIVE")"
        local bytes_times_per_4096="$((bytes_size / 4096))"
        dd if="/dev/zero" of="/dev/mapper/SEC_DRIVE" status=progress iflag=fullblock bs="4096" count="$bytes_times_per_4096"
        sync
        sleep 5
        cryptsetup close SEC_DRIVE
    fi

    category "Create partitions on device: $DEVICE"
    sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk "$DEVICE"
  o # clear the in memory partition table
  n # new partition
  p # primary partition
  $BOOT_PARTITION #
    # default - start at beginning of disk
  +1G # 1G boot partition
  n # new partition
  e # extended partition
    # partion number 2
    # default, start immediately after preceding partition
    # default, extend partition to end of disk
  n # new partition MAIN
    # default, start immediately after preceding partition
    # default, extend partition to end of disk
  a # make a partition bootable
  $BOOT_PARTITION # bootable partition is partition 1
  p # print the in-memory partition table
  w # write the partition table
  q # and we're done
EOF
    sleep 2
    partprobe "$DEVICE" || true
    category "Synchronise changes to hard disk"
    sync
    category "Wait a few seconds to prevent script failure"
    sleep 10

    category "Encrypting main container"
    state "Create LUKS container"
    while ! eval cryptsetup luksFormat --type=luks "${DEVICE}$MAIN_PARTITION" "${MAIN_ENCRYPTION_OPTIONS[@]:-}"; do
        sleep 1
    done
    sync

    state "Opening created LUKS container"
    while ! eval cryptsetup luksOpen "${DEVICE}$MAIN_PARTITION" ARCH; do
        sleep 1
    done
    sync

    category "Encrypting /boot"
    state "Create LUKS container"
    while ! eval cryptsetup luksFormat --type=luks "${DEVICE}$BOOT_PARTITION" "${BOOT_ENCRYPTION_OPTIONS[@]:-}"; do
        sleep 1
    done
    sync

    state "Opening created LUKS container"
    while ! eval cryptsetup luksOpen "${DEVICE}$BOOT_PARTITION" ARCH_BOOT; do
        sleep 1
    done
    sync

    category "Creating LVM volumes"
    while ! eval pvcreate -ff "/dev/mapper/ARCH"; do
        sleep 1
    done
    vgcreate archlinux "/dev/mapper/ARCH"
    lvcreate -L "$SWAP_SIZE" archlinux -n swap
    lvcreate -l +100%FREE archlinux -n root
    sleep 2

    category "Creating file systems"
    mkfs.btrfs -f -L "$HOSTNAME-root" "/dev/mapper/archlinux-root"
    local target_raw_dir="/tmp/archcmd-archlinux-raw"
    mkdir -p "$target_raw_dir"
    mount "/dev/archlinux/root" "$target_raw_dir"
    btrfs subvolume create "$target_raw_dir/btrfs"
    btrfs subvolume create "$target_raw_dir/btrfs/current"
    btrfs subvolume create "$target_raw_dir/btrfs/current/ROOT"
    btrfs subvolume create "$target_raw_dir/btrfs/current/home"
    btrfs subvolume create "$target_raw_dir/btrfs/snapshots"
    chmod 700 "$target_raw_dir/btrfs"
    umount "$target_raw_dir"
    rmdir "$target_raw_dir"

    mkfs.btrfs -f -L "$HOSTNAME-boot" "/dev/mapper/ARCH_BOOT"

    category "Creating Swap"
    mkswap -f -L swap "/dev/mapper/archlinux-swap"

    category "Partitioning is done"
}
