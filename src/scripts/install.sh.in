#!/bin/bash
#
# Copyright (C) 2017  nyshria <nyshria@member.fsf.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

cmd-install() {
    config-read

    category "Start installation procedure"

    state "Update packages"
    pacman -Sy

    state "Update pacman file database"
    target-exec pacman -Fy

    state "Configure locales"
    target-exec sed -i 's/^/#/g' "/etc/locale.gen"
    for locale in "${LOCALES[@]}"; do
        echo "${locale}" >>"$TARGET_DIR/etc/locale.gen"
    done
    target-exec locale-gen

    state "Set ${LOCALES[0]} as main locale"
    echo "LANG=\"$(echo "${LOCALES[0]}" | cut -f 1 -d ' ')\"" >"$TARGET_DIR/etc/locale.conf"

    state "Configure terminal"
    echo "KEYMAP=$KEYMAP" >"$TARGET_DIR/etc/vconsole.conf"
    echo "FONT=$FONT" >>"$TARGET_DIR/etc/vconsole.conf"

    state "Configure zone"
    target-exec rm -f "/etc/localtime"
    target-exec ln -s "/usr/share/zoneinfo/$ZONE" "/etc/localtime"

    state "Configure hardware clock"
    target-exec hwclock --systohc --utc

    state "Generate fstab"
    genfstab -U "$TARGET_DIR" > "$TARGET_DIR/etc/fstab"

    state "Configure hosts and hostname"
    echo "$HOSTNAME" >"$TARGET_DIR/etc/hostname"
    cp "/etc/hosts" "$TARGET_DIR/etc/hosts"
    { echo "127.0.0.1 $HOSTNAME.localdomain $HOSTNAME";
      echo "ff02::1 ip6-allnodes";
      echo "ff02::2 ip6-allrouters"; } >>"$TARGET_DIR/etc/hosts"

    state "Configure sudo"
    echo "%wheel ALL=(ALL) ALL" >"$TARGET_DIR/etc/sudoers.d/wheel"

    local encrypt_hook_name
    if (( ENCRYPT_ROOT_WITH_KEYFILE )); then
        encrypt_hook_name="encrypt-keyfile"
    else
        encrypt_hook_name="encrypt"
    fi

    state "Add custom initcpio hooks"
    write-encrypt-hook
    write-encrypt-install

    state "Configure mkinitcpio hooks"
    target-config-set-entry "/etc/mkinitcpio.conf" "HOOKS" "\"base udev modconf block keyboard keymap consolefont ${encrypt_hook_name} lvm2 resume filesystems\""

    state "Create /root/.luks folder"
    mkdir -p "$TARGET_DIR/root/.luks"
    chmod 700 "$TARGET_DIR/root/.luks"

    state "Create / keyfile"
    dd if=/dev/urandom of="$TARGET_DIR/root/.luks/root.key" bs=1024 count=8192
    chmod 0400 "$TARGET_DIR/root/.luks/root.key"

    state "Add devices key to /"
    while ! eval cryptsetup luksAddKey "${DEVICE}$MAIN_PARTITION" "$TARGET_DIR/root/.luks/root.key"; do
        sleep 1
    done
    sync

    state "Create /boot keyfile"
    dd if=/dev/urandom of="$TARGET_DIR/root/.luks/boot.key" bs=1024 count=8192
    chmod 0400 "$TARGET_DIR/root/.luks/boot.key"

    state "Add devices key to /boot"
    while ! eval cryptsetup luksAddKey "${DEVICE}$BOOT_PARTITION" "$TARGET_DIR/root/.luks/boot.key"; do
        sleep 1
    done
    sync

    state "Configure /boot to be mounted via crypttab"
    local boot_uuid
    boot_uuid="$(blkid "${DEVICE}$BOOT_PARTITION" | sed -n 's/.* UUID=\"\([^\"]*\)\".*/\1/p')"
    if ! grep -qs "$boot_uuid" "$TARGET_DIR/etc/crypttab"; then
        echo "boot UUID=$boot_uuid /root/.luks/boot.key luks" >>"$TARGET_DIR/etc/crypttab"
    fi
    sed -i '/boot/ s#^UUID=[0-9a-fA-F-]*#/dev/mapper/boot#g' "$TARGET_DIR/etc/fstab"

    state "Make /boot only readable by root"
    chmod 700 "$TARGET_DIR/boot"

    state "Build kernel image"
    target-exec mkinitcpio -p linux
    target-exec mkinitcpio -p linux-zen

    state "Configure grub"
    local quiet_cmdline
    if (( QUIET_BOOT )); then
        quiet_cmdline="quiet loglevel=3 udev.log_priority=3 "
    else
        quiet_cmdline=""
    fi
    local mainpartition_partuuid
    mainpartition_partuuid="$(blkid "${DEVICE}$MAIN_PARTITION" | sed -n 's/.* PARTUUID=\"\([^\"]*\)\".*/\1/p')"
    local bootpartition_partuuid
    bootpartition_partuuid="$(blkid "${DEVICE}$BOOT_PARTITION" | sed -n 's/.* PARTUUID=\"\([^\"]*\)\".*/\1/p')"
    target-config-set-entry "/etc/default/grub" "GRUB_TIMEOUT" 0
    target-config-set-entry "/etc/default/grub" "GRUB_ENABLE_CRYPTODISK" y
    target-config-set-entry "/etc/default/grub" "GRUB_HIDDEN_TIMEOUT_QUIET" "true"
    target-config-set-entry "/etc/default/grub" "GRUB_HIDDEN_TIMEOUT" 1
    target-config-set-entry "/etc/default/grub" "GRUB_CMDLINE_LINUX_DEFAULT" "\"${quiet_cmdline}cryptdevice=/dev/disk/by-partuuid/$mainpartition_partuuid:archlinux root=/dev/mapper/archlinux-root rw lang=en locale=$(echo "${LOCALES[0]}" | cut -f 1 -d ' ') resume=/dev/mapper/archlinux-swap rootflags=subvol=/btrfs/current/ROOT fsck.mode=skip\""

    state "Generate grub configuration"
    mkdir -p "$TARGET_DIR/boot/grub"
    mkdir -p "$TARGET_DIR/hostlvm"
    mount --bind /run/lvm "$TARGET_DIR/hostlvm"
    cat > "$TARGET_DIR/configure-grub.sh" <<EOF
#!/bin/bash
ln -s /hostlvm /run/lvm
grub-mkconfig -o /boot/grub/grub.cfg
EOF
    chmod +x "$TARGET_DIR/configure-grub.sh"
    target-exec /configure-grub.sh
    umount "$TARGET_DIR/hostlvm"
    rmdir "$TARGET_DIR/hostlvm"
    rm "$TARGET_DIR/configure-grub.sh"

    state "Install grub"
    target-exec grub-install --target=i386-pc --recheck "$DEVICE" --modules="part_gpt part_msdos"

    state "Backup the luksheaders to /root/.luks"
    cryptsetup luksHeaderBackup "${DEVICE}$MAIN_PARTITION" --header-backup-file "$TARGET_DIR/root/.luks/root.luksheader"
    cryptsetup luksHeaderBackup "${DEVICE}$BOOT_PARTITION" --header-backup-file "$TARGET_DIR/root/.luks/boot.luksheader"

    if [[ "$ETH_INTERFACE" != "" ]]; then
        state "Setup ifplugd Ethernet"
        target-enable "netctl-ifplugd@$ETH_INTERFACE.service"
        cp "$TARGET_DIR/etc/netctl/examples/ethernet-dhcp" "$TARGET_DIR/etc/netctl/eth"
        sed -i "s/eth0/$ETH_INTERFACE/g" "$TARGET_DIR/etc/netctl/eth"
    fi
    if [[ "$WIFI_INTERFACE" != "" ]]; then
        state "Setup auto Wifi"
        target-enable "netctl-auto@$WIFI_INTERFACE.service"
    fi

    state "Create user account"
    target-exec useradd -U -m -G "users,wheel" "$USER"
    while ! target-exec passwd "$USER"; do
        sleep 1
    done

    state "Lock root account"
    target-exec passwd -l root

    state "Set default umask to 027 (077 too restrictive)"
    sed -i 's/umask 022/umask 027/g' "$TARGET_DIR/etc/profile"

    category "Configure optional features"

    if (( CONFIGURE_FIREWALL )); then
        state "Configure firewall"
        target-install ufw ufw-extras
        target-enable ufw
        target-exec ufw default deny incoming
        target-exec ufw default allow outgoing
        target-exec ufw enable
    fi

    if [[ "$AUTOLOGIN" != "" ]]; then
        state "Configure auto login on $AUTOLOGIN"
        mkdir -p "$TARGET_DIR/etc/systemd/system/getty@$AUTOLOGIN.service.d"
        cat > "$TARGET_DIR/etc/systemd/system/getty@$AUTOLOGIN.service.d/autologin.conf" <<EOF
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin $USER --noclear %I \$TERM
EOF
    fi

    if (( ! CLEAR_TTY1 )); then
        state "Do not clear tty1 on boot"
        mkdir -p "$TARGET_DIR/etc/systemd/system/getty@tty1.service.d"
        cat > "$TARGET_DIR/etc/systemd/system/getty@tty1.service.d/noclear.conf" <<EOF
[Service]
TTYVTDisallocate=no
EOF
    fi

    if (( DISABLE_REBOOT_KEY )); then
        state "Disable reboot key combination"
        target-exec systemctl mask ctrl-alt-del.target
    fi

    if (( CONFIGURE_SYSTEMD_TIMESYNCD )); then
        state "Setup timesync"
        target-enable systemd-timesyncd.service
        target-config-set-entry "/etc/systemd/timesyncd.conf" "NTP" "$NTP_SERVERS"
    fi

    if (( CONFIGURE_SENSORS )); then
        state "Configure sensors"
        target-install lm_sensors
        if ! target-exec sensors-detect; then
            echo "Errors occurred. Skip configuring sensors..."
            sleep 1
        fi
    fi

    if (( CONFIGURE_PKGFILE )); then
        state "Configure pkgfile"
        target-install pkgfile
        target-exec pkgfile -u
    fi

    if (( CONFIGURE_IRQBALANCE )); then
        state "Configure irqbalance"
        target-install irqbalance
        target-enable irqbalance
    fi

    if (( CONFIGURE_SYSCTL )); then
        state "Configure sysctl"
        # Network tuning
        cat >> "$TARGET_DIR/etc/sysctl.d/30-network.conf" <<EOF
# Number of incoming connection sockets per listen call
net.core.somaxconn = 1024

# Number of incoming connections (packets) in backlog queue
net.core.netdev_max_backlog = 100000

# Socket receive buffer
net.core.rmem_default = 25165824
net.core.rmem_max = 25165824

# Socket send buffer
net.core.wmem_default = 25165824
net.core.wmem_max = 25165824

# Option memory buffers
net.core.optmem_max = 25165824

# Read buffer (minimum, initial, maximum)
net.ipv4.tcp_rmem = 20480 12582912 25165824
net.ipv4.udp_rmem_min = 16384 # Default

# Send buffer (minimum, initial, maximum)
net.ipv4.tcp_wmem = 20480 12582912 25165824
net.ipv4.udp_wmem_min = 16384 # Default

# Number of remembered connection requests without an acknowledgment
net.ipv4.tcp_max_syn_backlog = 30000

# Increase tcp time wait pool as DOS protection
net.ipv4.tcp_max_tw_buckets = 2000000

# Use MTU discovery when ICMP black hole detected
net.ipv4.tcp_mtu_probing = 1

# Reuse of TIME-WAIT sockets for loopback traffic only
net.ipv4.tcp_tw_reuse = 2

# Client and server support for TCP Fast Open to send and accept data in the
# opening SYN packet
net.ipv4.tcp_fastopen = 3

# Decrease time for tcp_fin_timeout connection
net.ipv4.tcp_fin_timeout = 10

# Do not time out the congestion window after an idle period
net.ipv4.tcp_slow_start_after_idle = 0

# Turn on window scaling which can enlarge the transfer window
net.ipv4.tcp_window_scaling = 1

# Keepalive configuration
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 5

# Prevention against SYN flood attack
net.ipv4.tcp_syncookies = 1

# Enable timestamps as defined in RFC1323
net.ipv4.tcp_timestamps = 1

# Strict mode validation of source
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1

# Enable select acknowledgments
net.ipv4.tcp_sack = 1

# Number of TCP sockets that are not attached to any user file handle to maintain.
net.ipv4.tcp_max_orphans = 60000

# Number of times SYNACKs for passive TCP connection.
net.ipv4.tcp_synack_retries = 2 

# Protect Against TCP Time-Wait 
net.ipv4.tcp_rfc1337 = 1

# ICMP configuration
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Ignore all ICMP ECHO and TIMESTAMP requests sent via broadcast/multicast
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Ignore bogus errors (violation of RFC1122) and do not log them.
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Disable ip forwarding
net.ipv4.ip_forward=0

# Do not accept source routing
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_source_route = 0

# Number of Router Solicitations to send until assuming that no routers are present.
net.ipv6.conf.default.router_solicitations = 0

# Accept Router Preference
net.ipv6.conf.default.accept_ra_rtr_pref = 0

# Learn Prefix Information in Router Advertisement
net.ipv6.conf.default.accept_ra_pinfo = 0

# Setting controls whether the system will accept Hop Limit settings from a router advertisement
net.ipv6.conf.default.accept_ra_defrtr = 0

# Router advertisements can cause the system to assign a global unicast address to an interface
net.ipv6.conf.default.autoconf = 0

# How many neighbor solicitations to send out per address?
net.ipv6.conf.default.dad_transmits = 0

# How many global unicast IPv6 addresses can be assigned to each interface?
net.ipv6.conf.default.max_addresses = 1
EOF

        # VM
        cat >> "$TARGET_DIR/etc/sysctl.d/30-vm.conf" <<EOF
# Configure dirty memory settings and when to flush
vm.dirty_background_ratio = 1
vm.dirty_background_bytes = 0
vm.dirty_ratio = 90
vm.dirty_bytes = 0
vm.dirty_writeback_centisecs = 100
vm.dirty_expire_centisecs = 1000
EOF

        # FS
        cat >> "$TARGET_DIR/etc/sysctl.d/30-fs.conf" <<EOF
# Increase size of file handles and inode cache 
fs.file-max = 2097152

# Protect agains creation or following links in certain conditions
fs.protected_hardlinks=1
fs.protected_symlinks=1
EOF

        # Kernel
        cat >> "$TARGET_DIR/etc/sysctl.d/30-kernel.conf" <<EOF
# Restrict access to kernel log
kernel.dmesg_restrict = 1

# Seconds to delay after a kernel panic and before rebooting automatically
kernel.panic = 300

# Disable system request debugging
kernel.sysrq = 0

# Core dump filenames contain PIDs
kernel.core_uses_pid = 1

# Allow more PIDs
kernel.pid_max = 65536

# ASLR
kernel.randomize_va_space=2
EOF

        # Swappiness
        cat >> "$TARGET_DIR/etc/sysctl.d/60-swappiness.conf" <<EOF
# Reduce usage of swap
vm.swappiness=1
vm.vfs_cache_pressure=50
EOF

        touch "$TARGET_DIR/etc/sysctl.d/99-overwrites.conf"
    fi

    if (( CONFIGURE_DNSCACHE )); then
        state "Configure unbound"
        target-install unbound expat openresolv
        target-enable unbound

        cat >> "$TARGET_DIR/etc/unbound/unbound.conf" <<EOF
forward-zone:
    name: "."
EOF

        if [[ "$DNS_SERVER1" = "" ]]; then
            # Default
            DNS_SERVER1=1.1.1.1
        fi

        echo "    forward-addr: $DNS_SERVER1" >> "$TARGET_DIR/etc/unbound/unbound.conf"

        if [[ "$DNS_SERVER2" != "" ]]; then
        echo "    forward-addr: $DNS_SERVER2" >> "$TARGET_DIR/etc/unbound/unbound.conf"
        fi

        if [[ "$DNS_SERVER3" != "" ]]; then
        echo "    forward-addr: $DNS_SERVER3" >> "$TARGET_DIR/etc/unbound/unbound.conf"
        fi
        
        # Configure resolv.conf
        target-config-set-entry "/etc/resolvconf.conf" "name_servers" "\"::1 127.0.0.1\""
    fi

    if (( CONFIGURE_SSH )); then
        state "Configure openssh"
        target-install openssh
        target-exec ufw allow "$SSHD_PORT" comment "sshd"
        target-enable sshd
        echo "PermitRootLogin no" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "PasswordAuthentication no" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "AllowUsers $USER" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "LoginGraceTime 60" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "MaxStartups 8" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "AllowTcpForwarding no" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "PermitEmptyPasswords no" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "ClientAliveInterval 300" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "ClientAliveCountMax 0" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "X11Forwarding no" >> "$TARGET_DIR/etc/ssh/sshd_config"
        echo "Port $SSHD_PORT" >> "$TARGET_DIR/etc/ssh/sshd_config"
        chmod 600 "$TARGET_DIR/etc/ssh/sshd_config"
    fi

    if (( CONFIGURE_POWER_SAVING )); then
        state "Configure power saving"
        target-install tlp
        if (( IS_THINKPAD )); then
            target-install tp_smapi acpi_call
        fi
        target-enable tlp tlp-sleep
        target-exec systemctl mask systemd-rfkill.service
        target-exec systemctl mask systemd-rfkill.socket
        target-exec systemctl mask NetworkManager.service

        target-config-set-entry "/etc/default/tlp" "SATA_LINKPWR_ON_BAT" "max_performance"
    fi

    if (( CONFIGURE_MLOCATE )); then
        state "Configure mlocate"
        target-install mlocate
        target-exec updatedb
    fi

    if (( CONFIGURE_ETCKEEPER )); then
        state "Configure etckeeper"
        target-install etckeeper
        target-exec etckeeper init
        target-exec bash -c 'cd /etc && git config user.email "root@localhost"'
        target-exec bash -c 'cd /etc && git config user.name "root"'
        target-enable etckeeper.timer
        target-exec etckeeper commit "Complete system installation"
    fi

    category "Installation is done"
}
