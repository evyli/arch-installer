#!/bin/bash
#
# Copyright (C) 2017  nytthea <nytthea@member.fsf.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

cmd-install() {
    config-read

    category "Start installation procedure"

    state "Update packages"
    pacman -Sy

    if (( CONFIGURE_ETCKEEPER )); then
        state "Configure etckeeper"
        target-install etckeeper
        target-exec etckeeper init
        target-exec bash -c 'cd /etc && git config user.email "root@localhost"'
        target-exec bash -c 'cd /etc && git config user.name "root"'
        target-exec systemctl enable etckeeper.timer
        target-exec etckeeper commit "After bootstrap"
    fi

    state "Update pacman file database"
    target-exec pacman -Fy

    state "Configure locales"
    target-exec sed -i 's/^/#/g' "/etc/locale.gen"
    for locale in "${LOCALES[@]}"; do
        echo "${locale}" >>"$TARGET_DIR/etc/locale.gen"
    done
    target-exec locale-gen

    state "Set ${LOCALES[0]} as main locale"
    echo "LANG=\"$(echo "${LOCALES[0]}" | cut -f 1 -d ' ')\"" >"$TARGET_DIR/etc/locale.conf"

    state "Configure terminal"
    echo "KEYMAP=$KEYMAP" >"$TARGET_DIR/etc/vconsole.conf"
    echo "FONT=$FONT" >>"$TARGET_DIR/etc/vconsole.conf"

    state "Configure zone"
    target-exec rm -f "/etc/localtime"
    target-exec ln -s "/usr/share/zoneinfo/$ZONE" "/etc/localtime"

    state "Configure hardware clock"
    target-exec hwclock --systohc --utc

    state "Generate fstab"
    genfstab -U "$TARGET_DIR" > "$TARGET_DIR/etc/fstab"

    state "Configure hosts and hostname"
    echo "$HOSTNAME" >"$TARGET_DIR/etc/hostname"
    cp "/etc/hosts" "$TARGET_DIR/etc/hosts"
    { echo "127.0.0.1 $HOSTNAME.localdomain $HOSTNAME";
      echo "ff02::1 ip6-allnodes";
      echo "ff02::2 ip6-allrouters"; } >>"$TARGET_DIR/etc/hosts"

    state "Configure sudo"
    echo "%wheel ALL=(ALL) ALL" >"$TARGET_DIR/etc/sudoers.d/wheel"

    state "Configure mkinitcpio hooks"
    target-config-set-entry "/etc/mkinitcpio.conf" "HOOKS" "\"base udev modconf block keyboard keymap consolefont encrypt lvm2 resume filesystems fsck\""

    state "Create /root/.luks folder"
    mkdir -p "$TARGET_DIR/root/.luks"
    chmod 700 "$TARGET_DIR/root/.luks"

    state "Create / keyfile"
    dd if=/dev/urandom of="$TARGET_DIR/root/.luks/root.key" bs=1024 count=8192
    chmod 0400 "$TARGET_DIR/root/.luks/root.key"

    state "Create /boot keyfile"
    dd if=/dev/urandom of="$TARGET_DIR/root/.luks/boot.key" bs=1024 count=8192
    chmod 0400 "$TARGET_DIR/root/.luks/boot.key"

    state "Configure /boot to be mounted via crypttab"
    local boot_uuid
    boot_uuid="$(blkid "${DEVICE}$BOOT_PARTITION" | sed -n 's/.* UUID=\"\([^\"]*\)\".*/\1/p')"
    if ! grep -qs "$boot_uuid" "$TARGET_DIR/etc/crypttab"; then
        echo "boot UUID=$boot_uuid /root/.luks/boot.key luks" >>"$TARGET_DIR/etc/crypttab"
    fi
    sed -i '/boot/ s#^UUID=[0-9a-fA-F-]*#/dev/mapper/boot#g' "$TARGET_DIR/etc/fstab"

    state "Make /boot only readable by root"
    chmod 700 "$TARGET_DIR/boot"

    state "Build kernel image"
    target-exec mkinitcpio -p linux

    state "Configure grub"
    local quiet_cmdline
    if (( QUIET_BOOT )); then
        quiet_cmdline="quiet "
    else
        quiet_cmdline=""
    fi
    local mainpartition_partuuid
    mainpartition_partuuid="$(blkid "${DEVICE}$MAIN_PARTITION" | sed -n 's/.* PARTUUID=\"\([^\"]*\)\".*/\1/p')"
    target-config-set-entry "/etc/default/grub" "GRUB_TIMEOUT" 2
    target-config-set-entry "/etc/default/grub" "GRUB_ENABLE_CRYPTODISK" y
    target-config-set-entry "/etc/default/grub" "GRUB_HIDDEN_TIMEOUT_QUIET" "false"
    target-config-set-entry "/etc/default/grub" "GRUB_HIDDEN_TIMEOUT" 0
    target-config-set-entry "/etc/default/grub" "GRUB_CMDLINE_LINUX_DEFAULT" "\"${quiet_cmdline}cryptdevice=/dev/disk/by-partuuid/$mainpartition_partuuid:archlinux root=/dev/mapper/archlinux-root rw lang=en locale=$(echo "${LOCALES[@]}" | cut -f 1 -d ' ') resume=/dev/mapper/archlinux-swap rootflags=subvol=/btrfs/current/ROOT\""

    state "Generate grub configuration"
    mkdir "$TARGET_DIR/boot/grub"
    mkdir "$TARGET_DIR/hostlvm"
    mount --bind /run/lvm "$TARGET_DIR/hostlvm"
    cat > "$TARGET_DIR/configure-grub.sh" <<EOF
#!/bin/bash
ln -s /hostlvm /run/lvm
grub-mkconfig -o /boot/grub/grub.cfg
EOF
    chmod +x "$TARGET_DIR/configure-grub.sh"
    target-exec /configure-grub.sh
    umount "$TARGET_DIR/hostlvm"
    rmdir "$TARGET_DIR/hostlvm"
    rm "$TARGET_DIR/configure-grub.sh"

    state "Install grub"
    target-exec grub-install --target=i386-pc --recheck "$DEVICE" --modules="part_gpt part_msdos"

    state "Backup the luksheaders to /root/.luks"
    cryptsetup luksHeaderBackup "${DEVICE}$MAIN_PARTITION" --header-backup-file "$TARGET_DIR/root/.luks/root.luksheader"
    cryptsetup luksHeaderBackup "${DEVICE}$BOOT_PARTITION" --header-backup-file "$TARGET_DIR/root/.luks/boot.luksheader"

    if [[ "$ETH_INTERFACE" != "" ]]; then
        state "Setup ifplugd Ethernet"
        target-exec systemctl enable "netctl-ifplugd@$ETH_INTERFACE.service"
        cp "$TARGET_DIR/etc/netctl/examples/ethernet-dhcp" "$TARGET_DIR/etc/netctl/eth"
        sed -i "s/eth0/$ETH_INTERFACE/g" "$TARGET_DIR/etc/netctl/eth"
    fi
    if [[ "$WIFI_INTERFACE" != "" ]]; then
        state "Setup auto Wifi"
        target-exec systemctl enable "netctl-auto@$WIFI_INTERFACE.service"
    fi

    state "Add devices key to /"
    while ! eval cryptsetup luksAddKey "${DEVICE}$MAIN_PARTITION" "$TARGET_DIR/root/.luks/root.key"; do
        sleep 1
    done
    sync

    state "Add devices key to /boot"
    while ! eval cryptsetup luksAddKey "${DEVICE}$BOOT_PARTITION" "$TARGET_DIR/root/.luks/boot.key"; do
        sleep 1
    done
    sync

    state "Create user account"
    target-exec useradd -m -G "users,$USERGROUPS" "$USER"
    while ! target-exec passwd "$USER"; do
        sleep 1
    done

    if [[ "$AUTOLOGIN" != "" ]]; then
        state "Configure auto login on $AUTOLOGIN"
        mkdir -p "$TARGET_DIR/etc/systemd/system/getty@$AUTOLOGIN.service.d"
        cat > "$TARGET_DIR/etc/systemd/system/getty@$AUTOLOGIN.service.d/autologin.conf" <<EOF
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin $USER --noclear %I \$TERM
EOF
    fi

    state "Lock root account"
    target-exec passwd -l root

    category "Configure optional features"

    if (( DO_NOT_CLEAR_TTY1 )); then
        state "Do not clear tty1 on boot"
        mkdir -p "$TARGET_DIR/etc/systemd/system/getty@tty1.service.d"
        cat > "$TARGET_DIR/etc/systemd/system/getty@tty1.service.d/noclear.conf" <<EOF
[Service]
TTYVTDisallocate=no
EOF
    fi

    if (( DISABLE_REBOOT_KEY )); then
        state "Disable reboot key combination"
        target-exec systemctl mask ctrl-alt-del.target
    fi

    if (( CONFIGURE_SYSTEMD_TIMESYNCD )); then
        state "Setup timesync"
        target-exec systemctl enable systemd-timesyncd.service
        target-config-set-entry "/etc/systemd/timesyncd.conf" "NTP" "0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org"
    fi

    if (( CONFIGURE_SENSORS )); then
        state "Configure sensors"
        target-install lm_sensors
        if ! target-exec sensors-detect; then
            echo "Errors occurred. Skip configuring sensors..."
            sleep 1
        fi
    fi

    if (( CONFIGURE_FIREWALL )); then
        state "Configure firewall"
        target-install ufw ufw-extras
        target-exec systemctl enable ufw
        target-exec ufw default deny incoming
        target-exec ufw default allow outgoing
        target-exec ufw enable
    fi

    if (( CONFIGURE_MLOCATE )); then
        state "Configure mlocate"
        target-install mlocate
        target-exec updatedb
    fi

    if (( CONFIGURE_PKGFILE )); then
        state "Configure pkgfile"
        target-install pkgfile
        target-exec pkgfile -u
    fi

    if (( CONFIGURE_ETCKEEPER )); then
        state "Etckeeper final commit"
        target-exec etckeeper commit "After installation"
    fi

    category "Installation is done"
}
